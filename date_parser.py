'''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
üìå –ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

'''
from datetime import datetime, date, time
import logging
#import argparse

def data_parser(text):
    year = datetime.now().year
    week_days = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1, "–≤—Ç–æ—Ä–Ω–∏–∫": 2, "—Å—Ä–µ–¥–∞": 3, "—á–µ—Ç–≤–µ—Ä–≥": 4, "–ø—è—Ç–Ω–∏—Ü–∞": 5, "—Å—É–±–±–æ—Ç–∞": 6, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7}
    months = {"—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3,"–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12}
    data = text.split() 
    week_day = 0
    month = 0 
    first_day = 0
    first_arg, second_arg, third_arg = True, True, True
    pointer = 0
    TEXT = "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã : 3-–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ñ–µ–≤—Ä–∞–ª—è"
    logging.basicConfig(filename ="parser.log" , encoding = "Utf-8", level=logging.ERROR)
    if len(data)==3:
        if not data[2].isdigit():
            if data[2] in months.keys():
                month = months[data[2]]
                
        elif int(data[2]) in months.values():
            month = int(data[2])
        
        if month == 0:
            logging.error("–í—ã –≤–≤–µ–ª–∏ –º–µ—Å—è—Ü –Ω–µ –≤–µ—Ä–Ω–æ ! " + TEXT)
            return False
            
        if not data[1].isdigit():
            if data[1] in week_days.keys():
                week_day = week_days[data[1]] 
        elif int(data[1]) in week_days.values():
            week_day = int(data[1])
        if week_day == 0:
            logging.error("–í—ã –≤–≤–µ–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏  –Ω–µ –≤–µ—Ä–Ω–æ ! " + TEXT)
            return False    
            
        if not data[0][0].isdigit(): 
            logging.error("–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏  –Ω–µ –≤–µ—Ä–Ω–æ ! " + TEXT)
            return False
        elif int(data[0][0]) < 1 or int(data[0][0])>4:
            logging.error("–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏  –Ω–µ –≤–µ—Ä–Ω–æ ! " + TEXT)
            return False
        else:     
            pointer = (int(data[0][0])-1)*7 
            
    elif len(data) == 2:
        #–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
        
        if not data[0].isdigit(): # –ø–µ—Ä–≤—ã–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π
            if data[0] in week_days.keys(): # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                week_day = week_days[data[0]] 
        elif not data[0].isalpha() and int(data[0]) in week_days.values():
            week_day = int(data[0])    
            # —Ç–æ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π - –º–µ—Å—è—Ü         
                
        if not data[1].isdigit(): # —Ç–µ–∫—Å—Ç–æ–º
            if data[1] in months.keys(): 
                month = months[data[1]]  # —á–∏—Å–ª–æ–º
        elif int(data[1]) in months.values():
            month = int(data[1])        
            
        
       
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        if data[0][0].isdigit() and not data[0].isalpha() : 
            if int(data[0][0]) < 1 or int(data[0][0])>4:
                logging.error("–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏  –Ω–µ –≤–µ—Ä–Ω–æ ! " + TEXT)
                return False
            else: # –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                pointer = (int(data[0][0])-1)*7 
                if not data[1].isdigit(): 
                    if data[1] in week_days.keys(): # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                        week_day = week_days[data[1]] 
                elif not data[1].isalpha() and int(data[1]) in week_days.values():
                        week_day = int(data[1])   
                month = datetime.now().month
               
        if week_day == 0 or month == 0:
            logging.error("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! " + TEXT)
            return False  
                
    else:         
        logging.error("–í–≤–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π! " + TEXT)
        return False
            
    date_1 = date(year, month, 1)
    first_day = date_1.isoweekday() # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 1 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    delta = week_day - first_day + pointer + 1 
    if week_day < first_day:
        delta += 7  
    return date(year, month, delta)
    

print(data_parser("2-–π –≤—Ç–æ—Ä–Ω–∏–∫ –∞–≤–≥—É—Å—Ç–∞ "))
print(data_parser("2-–π –≤—Ç–æ—Ä–Ω–∏–∫ –∞–≤–∞—Å—Ç–∞ ")) # –Ω–µ –≤–µ—Ä–Ω–æ –º–µ—Å—è—Ü - –≤ –ª–æ–≥
print(data_parser("2-–π –≤–∏—Ç–æ–∫ –∞–≤–≥—É—Å—Ç–∞ "))  # –Ω–µ –≤–µ—Ä–Ω–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ - –≤ –ª–æ–≥
print(data_parser("2-–π 2 –∞–≤–≥—É—Å—Ç–∞ "))
print(data_parser("3-–π 4 5"))
print(data_parser("–≤—Ç–æ—Ä–Ω–∏–∫ 8 "))
print(data_parser("2 –∞–≤–≥—É—Å—Ç–∞"))
print(data_parser("2 8 "))
print(data_parser("3-–π –≤—Ç–æ—Ä–Ω–∏–∫"))
print(data_parser("3-–π 2"))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã')
    parser.add_argument('param', metavar='number_in_month week_day month', type=str,  nargs="*", help='–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: 1-e –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å–µ–Ω—Ç—è–±—Ä—è')
    args = parser.parse_args()
    print(data_parser(*args.param))  